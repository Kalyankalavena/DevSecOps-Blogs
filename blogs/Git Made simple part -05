# 🔧 Git & Bitbucket: The Backbone of Team Collaboration | Part 3

📘 **Written by: _Kalyan Kalavena_**  

---

## 👋 Welcome Back!

In our previous blog, we explored the **foundations of Git**.  
Today, let’s dive deeper into **Bitbucket**, the Git-based self-hosted repository system trusted by enterprises for its **security**, **Jira integration**, and **DevSecOps-ready workflow**.

---

## 🏁 I. Why Bitbucket Over GitHub?

Bitbucket Server offers:
- ✅ **More control** (host on your own infrastructure)
- 🔒 Better security for enterprises
- 🔗 Native integration with **Atlassian tools** like Jira and Bamboo

> Ideal for **DevSecOps teams** working on secure, internal environments.

---

## 🛠️ II. Bitbucket Installation Prerequisites

- **Minimum Git Version:** `2.11+`
- ⚠️ CentOS 7 ships with outdated Git (`1.9`)

### Update Git on CentOS 7:
```bash
yum install git -y

Or just use CentOS 8+ for built-in newer versions.

💻 III. VM Setup for Bitbucket Server
Before installation:

Assign a Static IP

AWS: Elastic IP

GCP: Reserved IP

Open firewall ports:

7990 → Web Access (HTTP)

7999 → Git over SSH

📦 IV. Installing Bitbucket on Linux
bash

yum install wget -y
wget <bitbucket_download_url>
chmod a+x atlassian-bitbucket-*.bin
./atlassian-bitbucket-*.bin
Once installed, access it via:
👉 http://<your_static_ip>:7990

🧪 V. Initial Bitbucket Configuration
Paste your Atlassian license key

Create an admin account

(Optional) Enable /signup route

📂 VI. Projects & Repositories
Terminology:
Project: A logical group (e.g., DevSecOps)

Repository: The actual Git repo (e.g., roboshop-app)

Clone from Bitbucket:
bash

git clone http://<your_ip>:7990/scm/devsecops/roboshop-app.git
🔄 VII. Git Basics Recap – Bitbucket Style
bash

git status
git add index.html
git commit -m "Added homepage"
git push origin dev
🔑 Each commit is uniquely tracked via a 40-character SHA ID

🌱 Branching (Quick Example)
bash

git checkout -b feature-login dev
git checkout dev
git push origin feature-login
🌳 VIII. Git Flow: Real-World Branching Model
Long-Lived Branches:
master: For production deployment

development: For integration & staging

Short-Lived Branches:
Branch	Source	Target(s)	Purpose
feature	development	development	New features
release	development	master, development	Preparing for release
hotfix	master	master, development	Emergency fixes

👥 IX. Pull Requests (PRs)
"You don’t push to master. You request to merge." 💡

Typical PR Workflow:
✅ Finish your feature branch

📝 Create a Pull Request to dev or master

🔍 Get it reviewed by a peer

✅ Merge after approval

🪶 X. DevSecOps Takeaways
Hands-on Git = long-term memory

Always track with Git SHA IDs

Branch discipline avoids future chaos

Protect your VM with firewalls + static IPs

PRs enforce collaboration + quality

🚀 What’s Next?
In Part 4, we’ll dive into:

git rebase vs merge

fast-forward strategies

Trunk-based development — the DevOps way

Blog : https://essentialdevopslessons.blogspot.com/2025/07/httpskalyankalavena.comgit-beyond-the-clouds-part-3.html

